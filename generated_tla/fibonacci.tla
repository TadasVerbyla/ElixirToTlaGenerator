---- MODULE fibonacci ----
EXTENDS Naturals,Integers,TLC,Sequences
CONSTANT N
VARIABLE stack
VARIABLE return
Init == (stack = <<[n |-> N, res_case_1 |-> <<-1>>, res_case_2 |-> <<-1, -1, -1, -1, -1, -1, -1, -1>>, case_counter |-> 1, block_counter |-> 1]>>) /\ (return = -1)
AppendToSequenceStart(item, list) == <<item>> \o list
Next == ((stack[1].case_counter = 1) /\ (stack[1].block_counter = 2) /\ (stack' = SubSeq(stack, 2, Len(stack))) /\ (return' = stack[1].res_case_1[1])) \/ ((stack[1].case_counter = 2) /\ (stack[1].block_counter = 4) /\ (stack' = SubSeq(stack, 2, Len(stack))) /\ (return' = stack[1].res_case_2[8])) \/ ((stack[1].case_counter = 1) /\ (stack[1].block_counter = 1) /\ (stack[1].n < 2) /\ (stack' = [stack EXCEPT ![1].res_case_1[1] = stack[1].n, ![1].block_counter = 2]) /\ (return' = -1)) \/ ((stack[1].case_counter = 1) /\ (stack[1].block_counter = 1) /\ (~(stack[1].n < 2)) /\ (stack' = [stack EXCEPT ![1].case_counter = 2, ![1].block_counter = 1]) /\ (return' = -1)) \/ ((stack[1].case_counter = 2) /\ (stack[1].block_counter = 1) /\ (return = -1) /\ (~(stack[1].n < 2)) /\ (LET fn_nr_1 == stack[1].n - 1 IN stack' = AppendToSequenceStart([stack[1] EXCEPT !.n = fn_nr_1, !.case_counter = 1, !.block_counter = 1, !.res_case_2 = <<-1, -1, -1, -1, -1, -1, -1, -1>>], stack)) /\ (return' = -1)) \/ ((stack[1].case_counter = 2) /\ (stack[1].block_counter = 1) /\ (~(return = -1)) /\ (~(stack[1].n < 2)) /\ (LET fn_nr_1 == stack[1].n - 1 IN stack' = [stack EXCEPT ![1].res_case_2[1] = fn_nr_1, ![1].res_case_2[2] = return, ![1].block_counter = 2]) /\ (return' = -1)) \/ ((stack[1].case_counter = 2) /\ (stack[1].block_counter = 2) /\ (return = -1) /\ (~(stack[1].n < 2)) /\ (LET fn_nr_3 == stack[1].res_case_2[2] fn_nr_4 == stack[1].n - 2 IN stack' = AppendToSequenceStart([stack[1] EXCEPT !.n = fn_nr_4, !.case_counter = 1, !.block_counter = 1, !.res_case_2 = <<-1, -1, -1, -1, -1, -1, -1, -1>>], stack)) /\ (return' = -1)) \/ ((stack[1].case_counter = 2) /\ (stack[1].block_counter = 2) /\ (~(return = -1)) /\ (~(stack[1].n < 2)) /\ (LET fn_nr_3 == stack[1].res_case_2[2] fn_nr_4 == stack[1].n - 2 IN stack' = [stack EXCEPT ![1].res_case_2[3] = fn_nr_3, ![1].res_case_2[4] = fn_nr_4, ![1].res_case_2[5] = return, ![1].block_counter = 3]) /\ (return' = -1)) \/ ((stack[1].case_counter = 2) /\ (stack[1].block_counter = 3) /\ (return = -1) /\ (~(stack[1].n < 2)) /\ (LET fn_nr_6 == stack[1].res_case_2[5] fn_nr_7 == stack[1].res_case_2[3] + fn_nr_6 fn_nr_8 == fn_nr_7 IN stack' = [stack EXCEPT ![1].res_case_2[6] = fn_nr_6, ![1].res_case_2[7] = fn_nr_7, ![1].res_case_2[8] = fn_nr_8, ![1].block_counter = stack[1].block_counter + 1]) /\ (return' = -1))
Spec == (Init) /\ ([][Next]_<<stack>>)
====
